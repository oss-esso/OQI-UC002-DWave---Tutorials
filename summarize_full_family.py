"""Quick summary of full_family scenario results"""
import json

# Load PuLP results
with open('PuLP_Results/pulp_full_family_20251021_165253.json', 'r') as f:
    pulp_data = json.load(f)

print("\n" + "="*80)
print("FULL_FAMILY SCENARIO SUMMARY")
print("="*80)

print(f"\nScenario Configuration:")
print(f"  Farms: 15 (generated by farm_sampler)")
print(f"  Foods: 10 crops from 5 food groups")
print(f"  Total Land: 62.34 ha")
print(f"  Minimum Area: 0.05 ha per crop")

print(f"\nPuLP Results:")
print(f"  Status: {pulp_data['status']}")
print(f"  Objective: {pulp_data['objective_value']:.6f}")
print(f"  Solve Time: {pulp_data['solve_time']:.3f} seconds")

# Calculate crop totals
crops_total = {}
for key, area in pulp_data['areas'].items():
    if area > 0:
        # Key format: "Farm1_Crop"
        crop = key.split('_', 1)[1]
        crops_total[crop] = crops_total.get(crop, 0) + area

total_planted = sum(crops_total.values())

print(f"\nCrop Distribution (Total: {total_planted:.2f} ha):")
for i, (crop, area) in enumerate(sorted(crops_total.items(), key=lambda x: x[1], reverse=True), 1):
    pct = (area / total_planted) * 100
    print(f"  {i:2}. {crop:<12}: {area:6.2f} ha ({pct:5.1f}%)")

# Count selections
total_selections = sum(1 for area in pulp_data['areas'].values() if area > 0)

print(f"\nSelection Summary:")
print(f"  Total crops planted: {total_selections} (across all farms)")
print(f"  Average per farm: {total_selections/15:.1f} crops")
print(f"  Land utilization: {total_planted/62.34*100:.1f}%")

print("\n" + "="*80)
print("âœ… SCENARIO COMPLETE - See FULL_FAMILY_RESULTS_REPORT.md for details")
print("="*80 + "\n")
